/*
 * File: SpBuscarcodigoobbymovCaller.java  2008/10/09 10:09:45
 * User: Italo Maragliano Gonzalez (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.239.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:hWB3TzZx4JDlx4c+7XsaBh>>.
 */

package cl.tesoreria.renta.me.pkgsiirentame;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;

/**
 * Implements a caller of procedure "PKG_SII_RENTA_ME.SP_BUSCARCODIGOOBBYMOV".
 */
public class SpBuscarcodigoobbymovCaller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_SII_RENTA_ME.SP_BUSCARCODIGOOBBYMOV".
     *
     * IDMOV              NUMBER             Input
     * RESP03             VARCHAR2(4000)     Output
     * RESP07             VARCHAR2(4000)     Output
     * RESP87             VARCHAR2(4000)     Output
     * RESP91             VARCHAR2(4000)     Output
     * RESP315            VARCHAR2(4000)     Output
     */
    public static SpBuscarcodigoobbymovResult execute(Connection conn, BigDecimal idmov)
        throws java.sql.SQLException
    {
        SpBuscarcodigoobbymovResult result = new SpBuscarcodigoobbymovResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.SP_BUSCARCODIGOOBBYMOV(?,?,?,?,?,?)}");
        try
        {
            call.setBigDecimal(1, idmov);
            call.registerOutParameter(2, Types.VARCHAR);
            call.registerOutParameter(3, Types.VARCHAR);
            call.registerOutParameter(4, Types.VARCHAR);
            call.registerOutParameter(5, Types.VARCHAR);
            call.registerOutParameter(6, Types.VARCHAR);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toProcedureTable(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setResp03(call.getString(2));
            result.setResp07(call.getString(3));
            result.setResp87(call.getString(4));
            result.setResp91(call.getString(5));
            result.setResp315(call.getString(6));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            ProcedureTable[] tables = new ProcedureTable[resultSets.size()];
            result.setProcedureTables((ProcedureTable[]) resultSets.toArray(tables));
        }
        return result;
    }
}
