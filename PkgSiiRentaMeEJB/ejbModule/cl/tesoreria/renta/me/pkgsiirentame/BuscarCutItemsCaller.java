/*
 * File: SpGenerarfolio01meCaller.java  2008/10/09 10:09:45
 * User: Italo Maragliano Gonzalez (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.239.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:tQBTi-H3ZAScqwMEQMOqWv>>.
 */

package cl.tesoreria.renta.me.pkgsiirentame;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.sql.RowSet;

/**
 * Implements a caller of procedure "PKG_SII_RENTA_ME.buscar_cut_items".
 */
public class BuscarCutItemsCaller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_SII_RENTA_ME.buscar_cut_items ".
     *
     * MOV_IN       IN      Number
     * CURSOR_OUT   OUT     Sys_refcursor
     */
    public static BuscarCutItemsResult execute(Connection conn, BigDecimal idMov)
        throws java.sql.SQLException
    {
        BuscarCutItemsResult result = new BuscarCutItemsResult();
        ArrayList resultSets = new ArrayList();
        if (conn.getMetaData().getURL().startsWith("jdbc:oracle:"))
        {
            CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.buscar_cut_items(?,?)}");
            try
            {
                call.setBigDecimal(1, idMov);
                call.registerOutParameter(2, ORACLE_CURSOR);
                call.execute();
                resultSets.add(toRowSet((ResultSet) call.getObject(2)));
            }
            finally
            {
                call.close();
            }
        }
        else
        {
            CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.buscar_cut_items(?)}");
            try
            {
                call.setBigDecimal(1, idMov);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1)
                {
                    if (!haveRset)
                        updateCount = call.getUpdateCount();
                    else
                        resultSets.add(toRowSet(call.getResultSet()));
                    haveRset = call.getMoreResults();
                }
            }
            finally
            {
                call.close();
            }
        }
        if (resultSets.size() > 0)
        {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
