/*
 * File: SpExisteRegistradoFormmovtoCaller.java  2008/10/09 10:09:45
 * User: Italo Maragliano Gonzalez (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.239.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:MWZJPTpr3Gfvk3f1BWvQJh>>.
 */

package cl.tesoreria.renta.me.pkgsiirentame;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;

/**
 * Implements a caller of procedure "PKG_SII_RENTA_ME.SP_EXISTE_REGISTRADO_FORMMOVTO".
 */
public class SpExisteRegistradoFormmovtoCaller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_SII_RENTA_ME.SP_EXISTE_REGISTRADO_FORMMOVTO".
     *
     * NUMBERTRX          NUMBER             Input
     * INDEXISTE          NUMBER             Output
     * RUTOUT             NUMBER             Output
     * DVOUT              CHAR(2000)         Output
     * FORMTIPOOUT        NUMBER             Output
     * FOLIOOUT           NUMBER             Output
     */
    public static SpExisteRegistradoFormmovtoResult execute(Connection conn, BigDecimal numbertrx)
        throws java.sql.SQLException
    {
        SpExisteRegistradoFormmovtoResult result = new SpExisteRegistradoFormmovtoResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.SP_EXISTE_REGISTRADO_FORMMOVTO(?,?,?,?,?,?)}");
        try
        {
            call.setBigDecimal(1, numbertrx);
            call.registerOutParameter(2, Types.NUMERIC);
            call.registerOutParameter(3, Types.NUMERIC);
            call.registerOutParameter(4, Types.CHAR);
            call.registerOutParameter(5, Types.NUMERIC);
            call.registerOutParameter(6, Types.NUMERIC);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toProcedureTable(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setIndexiste(call.getBigDecimal(2));
            result.setRutout(call.getBigDecimal(3));
            result.setDvout(call.getString(4));
            result.setFormtipoout(call.getBigDecimal(5));
            result.setFolioout(call.getBigDecimal(6));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            ProcedureTable[] tables = new ProcedureTable[resultSets.size()];
            result.setProcedureTables((ProcedureTable[]) resultSets.toArray(tables));
        }
        return result;
    }
}
