/*
 * File: SpExisteMovByLlave2Caller.java  2008/10/09 10:09:45
 * User: Italo Maragliano Gonzalez (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.239.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:z3lkoAKTcvWnA2GcZsRRRI>>.
 */

package cl.tesoreria.renta.me.pkgsiirentame;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;

/**
 * Implements a caller of procedure "PKG_SII_RENTA_ME.SP_EXISTE_MOV_BY_LLAVE2".
 */
public class SpExisteMovByLlave2Caller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_SII_RENTA_ME.SP_EXISTE_MOV_BY_LLAVE2".
     *
     * RUTIN              NUMBER             Input
     * DVIN               CHAR(2000)         Input
     * FORMTIPOIN         NUMBER             Input
     * FOLIOIN            NUMBER             Input
     * EXISTEOUT          NUMBER             Output
     * MONTORET           NUMBER             Output
     * IDCTA              NUMBER             Output
     * IDMOV              NUMBER             Output
     * RECTIND            VARCHAR2(4000)     Output
     */
    public static SpExisteMovByLlave2Result execute(Connection conn, BigDecimal rutin, String dvin, BigDecimal formtipoin, BigDecimal folioin)
        throws java.sql.SQLException
    {
        SpExisteMovByLlave2Result result = new SpExisteMovByLlave2Result();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.SP_EXISTE_MOV_BY_LLAVE2(?,?,?,?,?,?,?,?,?)}");
        try
        {
            call.setBigDecimal(1, rutin);
            call.setString(2, dvin);
            call.setBigDecimal(3, formtipoin);
            call.setBigDecimal(4, folioin);
            call.registerOutParameter(5, Types.NUMERIC);
            call.registerOutParameter(6, Types.NUMERIC);
            call.registerOutParameter(7, Types.NUMERIC);
            call.registerOutParameter(8, Types.NUMERIC);
            call.registerOutParameter(9, Types.VARCHAR);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toProcedureTable(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setExisteout(call.getBigDecimal(5));
            result.setMontoret(call.getBigDecimal(6));
            result.setIdcta(call.getBigDecimal(7));
            result.setIdmov(call.getBigDecimal(8));
            result.setRectind(call.getString(9));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            ProcedureTable[] tables = new ProcedureTable[resultSets.size()];
            result.setProcedureTables((ProcedureTable[]) resultSets.toArray(tables));
        }
        return result;
    }
}
