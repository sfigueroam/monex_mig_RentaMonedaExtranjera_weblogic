/*
 * File: RegistrarFomulariosCaller.java  2008/10/09 10:09:45
 * User: Italo Maragliano Gonzalez (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.239.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:2NYvk7J-twGSeoxJJlXIMe>>.
 */

package cl.tesoreria.renta.me.pkgsiirentame;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;

/**
 * Implements a caller of procedure "PKG_SII_RENTA_ME.REGISTRAR_FOMULARIOS".
 */
public class RegistrarFomulariosCaller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_SII_RENTA_ME.REGISTRAR_FOMULARIOS".
     *
     * FORMUCOLL          FORMULARIOS        Input
     * INDOUT             NUMBER             Output
     */
    public static RegistrarFomulariosResult execute(Connection conn, Formulario[] formucoll)
        throws java.sql.SQLException
    {
        RegistrarFomulariosResult result = new RegistrarFomulariosResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call SII.PKG_SII_RENTA_ME.REGISTRAR_FOMULARIOS(?,?)}");
        try
        {
            call.setObject(1, dbFormularios(formucoll, conn));
            call.registerOutParameter(2, Types.NUMERIC);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toProcedureTable(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setIndout(call.getBigDecimal(2));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            ProcedureTable[] tables = new ProcedureTable[resultSets.size()];
            result.setProcedureTables((ProcedureTable[]) resultSets.toArray(tables));
        }
        return result;
    }
}
